openapi: 3.1.0
info:
  title: API сервер для проекта «Шесть городов».
  description: |-
    * Список ресурсов и маршрутов сервера «Шесть городов».
    * «Шесть городов» — сервис для путешественников, не желающих переплачивать за аренду жилья. Выбирайте один из шести популярных городов для путешествий и получайте актуальный список предложений по аренде.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0
tags:
  - name: users
    description: Действия с пользователями.
  - name: offers
    description: Действия с объявлениями.
  - name: comments
    description: Действия с комментариями.

paths:
  /users/register:
    post:
      tags:
        - users
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя.

      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true

      responses:
        "200":
          description: Пользователь зарегистрирован.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "409":
          description: Пользователь с таким email уже существует.


  /users/login:
    post:
      tags:
        - users
      summary: Авторизация пользователя
      description: Авторизует пользователя на основе логина и пароля
      requestBody:
        description: Вход в закрытую часть приложения.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUser'
        required: true
      responses:
        "201":
          description: Успешная авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: TOKEN

        "409":
          description: Авторизация не пройдена
    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю
      parameters:
        - name: Token
          in: header
          description: Только для авторизованных пользователей
          example: TOKEN
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: TOKEN
      responses:
        "200":
          description: Пользователь авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "400":
          description: Пользователь не авторизован
  /users/logout:
    post:
      tags:
        - users
      summary: Выход из закрытой части приложения
      description: Выход из закрытой части приложения (только если авторизация выполняется на основе сессий)
      parameters:
        - name: Token
          in: header
          description: Только для авторизованных пользователей
          example: TOKEN
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: TOKEN
      responses:
        "204":
          description: Сессия завершена

  /offers/premium/{city}:
    get:
      tags:
        - offers
      summary: Премиальные предложения для города
      description: Возвращает не больше 3 предложений с флагом «Premium».
      parameters:
        - name: city
          in: query
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    city: string
                    example: Paris
          description: Город
      responses:
        "200":
          description: Премиальные предложения для города
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offers'
        "404":
          description: Список предложений не получен

  /offers/favorite:
    get:
      tags:
        - offers
      summary: Список избранных предложений
      description: Возвращает массив предложений, добавленных в избранное.
      parameters:
        - name: token
          in: header
          description: Только для авторизованных пользователей
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: TOKEN
      responses:
        "200":
          description: Список избранных предложений
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offers'
        "404":
          description: Пользователь не авторизован

  /offers/favorite/{offerId}:
    patch:
      tags:
        - offers
      summary: Добавление и удаление предложения в/из избранного
      description: Добавление и удаление предложения в/из избранного.
      parameters:
        - name: Token
          in: header
          description: Только для авторизованных пользователей
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: TOKEN
        - name: offerId
          in: query
          content:
            application/json:
              schema:
                type: object
                properties:
                  offerId:
                    type: string
                    example: ID
      requestBody:
        description: Изменение поля favorite.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changeFavorite'
        required: true
      responses:
        "201":
          description: Статус предложения изменен
        "400":
          description: Статус предложения не изменен

  /offers/create:
    post:
      tags:
        - offers
      summary: Создание нового предложения
      description: Создание нового предложения
      parameters:
        - name: Token
          in: header
          description: Только для авторизованных пользователей
          example: TOKEN
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: TOKEN
      requestBody:
        description: Данные для создания предложения.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/offer'
        required: true
      responses:
        "200":
          description: Предложение создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        "409":
          description: Предложение не создано

  /offers/{offerId}:
    post:
      tags:
        - offers
      summary: Редактирование предложения
      description: Редактирование предложения
      parameters:
        - name: Token
          in: header
          description: Только для авторизованных пользователей
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: TOKEN
        - name: offerId
          in: query
          content:
            application/json:
              schema:
                type: object
                properties:
                  offerId:
                    type: string
                    example: ID
      requestBody:
        description: Данные для редактирования предложения.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editOffer'
        required: true
      responses:
        "200":
          description: Предложение изменено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/editOffer'
        "400":
          description: Предложение не изменено

    delete:
      tags:
        - offers
      summary: Удаление предложения
      description: Удаление предложения
      parameters:
        - name: Token
          in: header
          description: Только для авторизованных пользователей
          example: TOKEN
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: TOKEN
      responses:
        "204":
          description: Предложение удалено
        "400":
          description: Предложение не удалено

    get:
      tags:
        - offers
      summary: Детальная информация по предложению
      description: Детальная информация по предложению
      parameters:
        - name: offerId
          in: query
          description: OFFER ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  offerId:
                    type: string
                    example: ID
      responses:
        "200":
          description: Детальная информация по предложению
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'

  /offers:
    get:
      tags:
        - offers
      summary: Список предложений по аренде
      description: Список предложений по аренде
      parameters:
        - name: count
          in: query
          description: OFFER COUNT
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 120
      responses:
        "200":
          description: Список предложений по аренде
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offers'


  /comments/{offerId}:
    get:
      tags:
        - comments
      summary: Список комментариев для предложения
      description: Список комментариев для предложения
      parameters:
        - name: offerId
          in: query
          description: OFFER ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  offerId:
                    type: string
                    example: ID
      responses:
        "200":
          description: Список комментариев для предложения успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comments'
        "400":
          description: Список комментариев не получен

  /comment:
    post:
      tags:
        - comments
      summary: Добавление комментария
      description: Добавление комментария
      parameters:
        - name: Token
          in: header
          description: Только для авторизованных пользователей
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: TOKEN
      requestBody:
        description: Добавление комментария
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/commentCreate'
        required: true
      responses:
        "200":
          description: Комментарий успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
        "400":
          description: Комментарий не добавлен


components:
  schemas:
    createUser:
      type: object

      properties:
        userType:
          type: string
          enum: [ simple, pro ]
          example: simple

        email:
          type: string
          example: keks@htmlacademy.ru

        username:
          type: string
          example: name

        avatar:
          type: string
          example: avatar.jpg

        password:
          type: string
          example: 123456

    user:
      type: object

      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea

        userType:
          type: string
          enum: [ simple, pro ]
          example: simple

        email:
          type: string
          example: keks@htmlacademy.ru

        username:
          type: string
          example: name

        avatar:
          type: string
          example: avatar.jpg

    loginUser:
      type: object

      properties:
        email:
          type: string
          example: keks@htmlacademy.ru

        password:
          type: string
          example: 123456

    offer:
      type: object
      properties:
        name:
          type: string
          example: Квартира
          minLength: 10
          maxLength: 100

        description:
          type: string
          example: Описание
          minLength: 20
          maxLength: 1024

        publicationDate:
          type: string
          example: 2023-11-01T00:00:00Z

        city:
          type: string
          enum: [ Paris, Cologne, Brussels, Amsterdam, Hamburg, Dusseldorf ]
          example: Paris

        previewImage:
          type: string
          example: offer.jpg

        images:
          type: array
          items:
            type: string
            example: offer.jpg
          minItems: 6
          maxItems: 6

        premium:
          type: boolean
          example: true

        favorite:
          type: boolean
          example: false

        rating:
          type: number
          format: float
          example: 2.5
          minimum: 1
          maximum: 5

        housingType:
          type: string
          enum: [ Apartment, House, Room, Hotel ]
          example: apartment

        roomCount:
          type: integer
          example: 4
          minimum: 1
          maximum: 8

        guestCount:
          type: integer
          example: 3
          minimum: 1
          maximum: 10

        cost:
          type: number
          example: 50600
          minimum: 100
          maximum: 100000

        facilities:
          type: array
          items:
            type: string
            enum: [ Breakfast, Air conditioning, Laptop friendly workspace, Baby seat, Washer, Towels, Fridge ]
            example: Breakfast, Laptop
          minItems: 1

        offerAuthor:
          $ref: '#/components/schemas/user'

        commentsCount:
          type: number
          example: 10

        coordinates:
          $ref: '#/components/schemas/coordinates'

    editOffer:
      type: object
      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea

        name:
          type: string
          example: Квартира
          minLength: 10
          maxLength: 100

        description:
          type: string
          example: Описание
          minLength: 20
          maxLength: 1024

        publicationDate:
          type: string
          example: 2023-11-01T00:00:00Z

        city:
          type: string
          enum: [ Paris, Cologne, Brussels, Amsterdam, Hamburg, Dusseldorf ]
          example: Paris

        previewImage:
          type: string
          example: offer.jpg

        images:
          type: array
          items:
            type: string
            example: [ offer.jpg, offer_room.jpg ]
          minItems: 6
          maxItems: 6

        premium:
          type: boolean
          example: true

        favorite:
          type: boolean
          example: false

        rating:
          type: number
          format: float
          example: 2.5
          minimum: 1
          maximum: 5

        housingType:
          type: string
          enum: [ Apartment, House, Room, Hotel ]
          example: apartment

        roomCount:
          type: integer
          example: 4
          minimum: 1
          maximum: 8

        guestCount:
          type: integer
          example: 3
          minimum: 1
          maximum: 10

        cost:
          type: number
          example: 50600
          minimum: 100
          maximum: 100000

        facilities:
          type: array
          items:
            type: string
            enum: [ Breakfast, Air conditioning, Laptop friendly workspace, Baby seat, Washer, Towels, Fridge ]
            example: [ Breakfast, Laptop ]
          minItems: 1

        offerAuthor:
          $ref: '#/components/schemas/user'

        commentsCount:
          type: number
          example: 10

        coordinates:
          $ref: '#/components/schemas/coordinates'

    offers:
      type: array
      items:
        type: offer
        $ref: '#/components/schemas/offer'

    coordinates:
      type: object

      properties:
        latitude:
          type: float
          example: 22.2233455

        longitude:
          type: float
          example: 1.33345445

    changeFavorite:
      type: object

      properties:
        favorite:
          type: boolean
          example: true


    comment:
      type: object
      properties:
        text:
          type: string
          example: Очень хорошее предложение
          minLength: 5
          maxLength: 1024

        publicationDate:
          type: string
          example: 2023-11-01T00:00:00Z

        rating:
          type: number
          example: 5
          minimum: 1
          maximum: 5
        user:
          $ref: '#/components/schemas/user'

    commentCreate:
      type: object
      properties:
        text:
          type: string
          example: Очень хорошее предложение
          minLength: 5
          maxLength: 1024

        rating:
          type: number
          example: 5
          minimum: 1
          maximum: 5
        user:
          $ref: '#/components/schemas/user'

    comments:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/comment'


